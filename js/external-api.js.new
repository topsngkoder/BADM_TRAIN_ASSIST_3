/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ —Å —Å–∞–π—Ç–∞ Badminton4u —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏
 * @param {string} url - URL –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–∞ Badminton4u
 * @returns {Promise<number>} - –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ –≤ –ø–∞—Ä–Ω–æ–º —Ä–∞–∑—Ä—è–¥–µ
 */
export async function getPlayerRatingFromBadminton4u(url) {
    if (!url) {
        console.error('‚ùå URL –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        throw new Error('URL –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
    }

    console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞ —Å —Å–∞–π—Ç–∞ Badminton4u...');
    console.log('üîó URL –ø—Ä–æ—Ñ–∏–ª—è –∏–≥—Ä–æ–∫–∞:', url);

    try {
        console.time('proxyFetch');
        
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        const proxyUrl = `/api/get-player-rating?url=${encodeURIComponent(url)}`;
        console.log('üîó URL –ø—Ä–æ–∫—Å–∏:', proxyUrl);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º—É –ø—Ä–æ–∫—Å–∏
        const response = await fetch(proxyUrl);
        
        if (!response.ok) {
            try {
                // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON —Å –æ—à–∏–±–∫–æ–π
                const errorData = await response.json();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏:', errorData);
                throw new Error(errorData.error || `–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
            } catch (jsonError) {
                // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å JSON, –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
                const errorText = await response.text();
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏ (–Ω–µ JSON):', errorText.substring(0, 200));
                throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${response.status} ${response.statusText}`);
            }
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        try {
            const data = await response.json();
            
            if (!data.rating) {
                console.error('‚ùå –°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–π—Ç–∏–Ω–≥:', data);
                throw new Error('–°–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–π—Ç–∏–Ω–≥');
            }
            
            const rating = parseInt(data.rating);
            console.log('‚úÖ –†–µ–π—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏:', rating);
            
            console.timeEnd('proxyFetch');
            return rating;
        } catch (jsonError) {
            console.timeEnd('proxyFetch');
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏:', jsonError);
            throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –ø—Ä–æ–∫—Å–∏');
        }

    } catch (error) {
        console.timeEnd('proxyFetch');
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–∫—Å–∏:', error);
        throw error;
    }
}